{"version":3,"sources":["assets/img/walletconnect.png","assets/img/metamask.png","assets/img/trustwallet.png","components/ConnectButton.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ConnectButton","props","state","WalletConnectSelectionDlgOpen","connected","networkWarning","baseState","componentDidMount","existingConnectionJSON","localStorage","getItem","existingConnection","JSON","parse","initialConnect_WalletConnect","window","ethereum","initialConnect","componentWillUnmount","a","chainId","chainIdExpected","setState","walletConnectProvider","WalletConnectProvider","infuraId","rpc","97","56","enable","web3","Web3","eth","getAccounts","accounts","length","walletAddress","handleConnectWallet_WalletConnect","console","log","request","method","then","res","handleConnectWallet","confirm","document","createElement","target","href","click","networkVersion","updateRefLink","forceUpdate","farm_contract","Contract","contract_abi","contractAddress","handleDeactivateAccount","handleDeactivateAccount_WalletConnect","disconnect","setItem","refLinkWalledId","getElementById","innerText","handleWalletConnectDlgSelection","selection","handleWalletConnectDlgClose","onClick_connect","onClick_disconnect","render","button","Button","fullWidth","variant","color","sx","my","marginRight","size","onClick","style","height","walletConnectPreSelectDlg","Dialog","onClose","open","List","p","ListItem","autoFocus","ListItemAvatar","src","metamaskLogo","width","ListItemText","primaryTypographyProps","fontSize","primary","trustwalletLogo","walletConnectLogo","Box","Grid","container","item","xs","md","padding","slice","React","Component","styled","Paper","theme","typography","h3","spacing","textAlign","palette","text","secondary","dataRefreshInterval","App","radioValue","progress","walletAccepted","alreadyVoted","totalYES","totalNO","totalVotes","votingEnded","_stateInterval","abi","checkState","clearInterval","setInterval","yourAddress","methods","getWalletStatus","call","result","getUserAnswer","getTotalAnswers","resultYes","parseInt","resultNO","started","onClick_Submit","openValue","toLowerCase","vote","send","from","response","catch","err","alert","handleRadioChange","event","_value","className","display","FormControl","disabled","RadioGroup","name","onChange","FormControlLabel","value","control","Radio","label","marginLeft","marginTop","paddingTop","paddingBottom","border","borderRadius","toFixed","CircularProgress","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","darkTheme","createTheme","mode","main","background","default","ReactDOM","StrictMode","ThemeProvider"],"mappings":"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","file":"static/js/main.1c2a7c32.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/walletconnect.1b22e784.png\";","export default __webpack_public_path__ + \"static/media/metamask.55d59196.png\";","export default __webpack_public_path__ + \"static/media/trustwallet.8de17c9e.png\";","import React from 'react';\r\nimport { Button, Box, Grid } from \"@mui/material\";\r\nimport Web3 from \"web3\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport {ContractContext} from '../assets/abi/voting-contract';\r\nimport PowerIcon from '@mui/icons-material/Power';\r\nimport PowerOffIcon from '@mui/icons-material/PowerOff';\r\nimport { StringMappingType } from 'typescript';\r\n\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\n\r\nimport walletConnectLogo from \"../assets/img/walletconnect.png\";\r\nimport metamaskLogo from \"../assets/img/metamask.png\"\r\nimport trustwalletLogo from \"../assets/img/trustwallet.png\"\r\n\r\n\r\n\r\ninterface ConnectButtonProps {\r\n  style?: React.CSSProperties;\r\n}\r\n\r\nclass ConnectButton extends React.Component<ConnectButtonProps> {\r\n \r\n  state = {\r\n    WalletConnectSelectionDlgOpen: false,\r\n    connected: false,\r\n    networkWarning: \"\"\r\n  }\r\n  baseState: any;\r\n  constructor(props: ConnectButtonProps) {\r\n      super(props);\r\n      this.baseState = this.state;\r\n  }\r\n\r\n  componentDidMount = () => { \r\n      //this.handleConnectWallet();\r\n      //this.handleConnectWallet_WalletConnect();\r\n      \r\n      try{\r\n        let existingConnectionJSON = localStorage.getItem(\"walletconnect\");\r\n        // walletconnect\r\n        if(existingConnectionJSON){\r\n          let existingConnection = false;\r\n          try{\r\n            let conn = JSON.parse(existingConnectionJSON);\r\n            existingConnection = conn.connected;\r\n          }catch{\r\n            existingConnection = false;\r\n          }\r\n          if(existingConnection){\r\n            this.initialConnect_WalletConnect(); // reuse created connection. no Modal will show\r\n          }\r\n        }else{\r\n          if(window.ethereum){\r\n            this.initialConnect(); // trust/metamask\r\n          }\r\n        }\r\n      }catch{ \r\n  \r\n      }\r\n  }\r\n\r\n  componentWillUnmount = () => { \r\n\r\n  }\r\n\r\n  componentWillReceiveProps(props: ConnectButtonProps) { \r\n\r\n\r\n  }\r\n\r\n  initialConnect_WalletConnect = async () => {\r\n\r\n    if(window.chainId > 0 && window.chainIdExpected != window.chainId){\r\n      this.setState({networkWarning: `network ${window.chainId} not supported.`});\r\n      return;\r\n    }else{\r\n      this.setState({networkWarning: ``});\r\n    }\r\n\r\n    //  Create WalletConnect Provider\r\n    window.walletConnectProvider = new WalletConnectProvider({\r\n      infuraId: \"042b9beb246dccdd1b2ced3804dfc2d9\", // Required\r\n      chainId: window.chainIdExpected, // \r\n      rpc: {\r\n        97: \"https://data-seed-prebsc-1-s1.binance.org:8545\", // bsc testnet\r\n        56: \"https://bsc-dataseed.binance.org/\" // bsc mainnet\r\n      }/*,\r\n      qrcodeModalOptions: {\r\n        mobileLinks: [\r\n          \"encrypted ink\"\r\n        ],\r\n        desktopLinks: [\r\n          \"encrypted ink\"\r\n        ]\r\n      }*/\r\n    });\r\n    //  Enable session (triggers QR Code modal)\r\n    try{\r\n\r\n      await window.walletConnectProvider.enable();    \r\n\r\n      window.web3 = new Web3(window.walletConnectProvider as any);\r\n\r\n      const accounts = await window.web3.eth.getAccounts();\r\n      if(accounts.length > 0) {\r\n        window.connected = true;\r\n        this.setState({connected: true});\r\n        window.walletAddress = accounts[0];\r\n        this.handleConnectWallet_WalletConnect();\r\n      }\r\n    }catch{\r\n      console.log(\"error on walletconnect\");\r\n    }\r\n\r\n  }\r\n\r\n  initialConnect = () => {\r\n    if (window.ethereum) {\r\n\r\n      if(window.chainId > 0 && window.chainIdExpected != window.chainId){\r\n        this.setState({networkWarning: `network ${window.chainId} not supported.`});\r\n        return;\r\n      }else{\r\n        this.setState({networkWarning: ``});\r\n      }\r\n\r\n      window.ethereum\r\n        .request({ method: \"eth_requestAccounts\" })\r\n        .then((res: string[]) => {\r\n          if (res.length >= 1) {\r\n            window.connected = true;\r\n            this.setState({connected: true});\r\n            window.walletAddress = res[0];\r\n            this.handleConnectWallet();\r\n          }\r\n        });\r\n    } else if (\r\n      window.confirm(\r\n        \"You have to use MetaMask or TrustWallet to connect. Press OK to continue to the MetaMask download page. https://metamask.io/download\"\r\n      )\r\n    ) {\r\n      let a = document.createElement(\"a\");\r\n      a.target = \"_blank\";\r\n      a.href = \"https://metamask.io/download\";\r\n      a.click();\r\n    }\r\n  }\r\n\r\n  handleConnectWallet = () => {\r\n\r\n    if(window.ethereum){\r\n      window.web3 = new Web3(window.ethereum);\r\n\r\n      window.chainId = window.ethereum.networkVersion;\r\n      if(window.chainId > 0 && window.chainIdExpected != window.chainId){\r\n        this.setState({networkWarning: `network ${window.chainId} not supported.`});\r\n      }else{\r\n        this.setState({networkWarning: ``});\r\n      }\r\n\r\n      window.ethereum.request({ method: \"eth_accounts\" }).then((res: any) => {\r\n        if (res.length >= 1) {\r\n          window.connected = true;\r\n          this.setState({connected: true});\r\n          window.walletAddress = res[0];\r\n          this.updateRefLink();\r\n          //console.log(\"eth_accounts\", res);\r\n          this.forceUpdate();\r\n\r\n          window.farm_contract = (new window.web3.eth.Contract(window.contract_abi, window.contractAddress) as unknown) as ContractContext;\r\n        }\r\n      });\r\n    }\r\n    \r\n  }\r\n\r\n  handleConnectWallet_WalletConnect = async () => {\r\n\r\n    if(window.walletConnectProvider){\r\n      //window.web3 = new Web3(window.walletConnectProvider);\r\n      window.chainId = window.walletConnectProvider.chainId;\r\n      if(window.chainId > 0 && window.chainIdExpected != window.chainId){\r\n        this.setState({networkWarning: `network ${window.chainId} not supported.`});\r\n      }else{\r\n        this.setState({networkWarning: ``});\r\n      }\r\n\r\n      const accounts = await window.web3.eth.getAccounts();\r\n      if(accounts.length > 0) {\r\n        window.connected = true;\r\n        this.setState({connected: true});\r\n        window.walletAddress = accounts[0];\r\n        this.updateRefLink();\r\n        this.forceUpdate();\r\n\r\n        window.farm_contract = (new window.web3.eth.Contract(window.contract_abi, window.contractAddress) as unknown) as ContractContext;\r\n      }\r\n    }\r\n    \r\n  }\r\n\r\n  handleDeactivateAccount = () => {\r\n    window.connected = false;\r\n    window.walletAddress = \"\";\r\n    this.setState({networkWarning: ``});\r\n    this.setState({connected: false});\r\n    this.forceUpdate();\r\n  }\r\n\r\n  handleDeactivateAccount_WalletConnect = () => {\r\n    window.walletConnectProvider.disconnect();\r\n    window.connected = false;\r\n    window.walletAddress = \"\";\r\n    window.chainId = 0;\r\n    localStorage.setItem(\"walletconnect\", \"\");\r\n    this.setState({networkWarning: ``});\r\n    this.setState({connected: false});\r\n    this.forceUpdate();\r\n  }\r\n\r\n  updateRefLink = () => {\r\n    let refLinkWalledId = document.getElementById(\"walletAddressRefLink\");\r\n    if(refLinkWalledId != null){\r\n      refLinkWalledId.innerText = window.walletAddress;\r\n    }\r\n  }\r\n\r\n  handleWalletConnectDlgSelection = (selection: string) => {\r\n    this.setState({\r\n      WalletConnectSelectionDlgOpen: false\r\n    });\r\n\r\n    switch(selection){\r\n      case \"metamask\":\r\n      case \"trustwallet\":\r\n        this.initialConnect();\r\n      break;\r\n\r\n      case \"walletconnect\":\r\n        this.initialConnect_WalletConnect();\r\n      break;\r\n    }\r\n  }\r\n\r\n  handleWalletConnectDlgClose = () => {\r\n    this.setState({\r\n      WalletConnectSelectionDlgOpen: false\r\n    });\r\n  }\r\n\r\n  onClick_connect = () => {\r\n\r\n    this.setState({\r\n      WalletConnectSelectionDlgOpen: true\r\n    });\r\n\r\n    //initialConnect_WalletConnect\r\n  }\r\n\r\n  onClick_disconnect = () => {\r\n    try{\r\n      this.handleDeactivateAccount_WalletConnect();\r\n    }catch{\r\n\r\n    }\r\n\r\n    try{\r\n      this.handleDeactivateAccount();\r\n    }catch{\r\n\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n\r\n    let button;\r\n    if (this.state.connected) { \r\n      button = <Button fullWidth={true} variant={\"contained\"} color={\"secondary\"} sx={{my: 0, marginRight: 0 }} size=\"small\" onClick={this.onClick_disconnect}><PowerOffIcon style={{height: \"20px\", marginRight: \"8px\"}}></PowerOffIcon>disconnect</Button>;    \r\n    } else {\r\n      button = <Button fullWidth={true} variant={\"contained\"} color={\"primary\"} sx={{my: 0, marginRight: 0 }} size=\"small\" onClick={this.onClick_connect}><PowerIcon style={{height: \"20px\", marginRight: \"8px\"}}></PowerIcon>connect</Button>;  \r\n    }\r\n\r\n    let walletConnectPreSelectDlg =    <Dialog onClose={this.handleWalletConnectDlgClose} open={this.state.WalletConnectSelectionDlgOpen}>\r\n      <List sx={{ p: \"32px\" }}>\r\n        <ListItem autoFocus button onClick={() => this.handleWalletConnectDlgSelection('metamask')}>\r\n          <ListItemAvatar>\r\n              <img src={metamaskLogo} style={{width: \"40px\"}} />\r\n            </ListItemAvatar>\r\n          <ListItemText primaryTypographyProps={{fontSize: \"24pt\"}} primary=\"Metamask\" />\r\n        </ListItem>\r\n        <ListItem autoFocus button onClick={() => this.handleWalletConnectDlgSelection('trustwallet')}>\r\n            <ListItemAvatar>\r\n              <img src={trustwalletLogo} style={{width: \"40px\"}} />\r\n            </ListItemAvatar>\r\n          <ListItemText primaryTypographyProps={{fontSize: \"24pt\"}} primary=\"Trust Wallet\" />\r\n        </ListItem>\r\n        <ListItem autoFocus button onClick={() => this.handleWalletConnectDlgSelection('walletconnect')}>\r\n            <ListItemAvatar>\r\n              <img src={walletConnectLogo} style={{width: \"40px\"}} />\r\n            </ListItemAvatar>\r\n          <ListItemText primaryTypographyProps={{fontSize: \"24pt\"}} primary=\"WalletConnect\" />\r\n        </ListItem>\r\n      </List>\r\n    </Dialog>;\r\n\r\n    return (\r\n      <Box>\r\n        {this.state.networkWarning}\r\n        <Grid container>\r\n          <Grid item xs={12} md={12}>\r\n            {button}\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={12}>\r\n            <div style={{padding: \"16px\"}}>\r\n              {this.state.connected && window.walletAddress &&\r\n                `${window.walletAddress.slice(0, 6)}...${window.walletAddress.slice(\r\n                  window.walletAddress.length - 4,\r\n                  window.walletAddress.length\r\n                )}`}\r\n                \r\n            </div>\r\n          </Grid>\r\n\r\n          \r\n        </Grid>\r\n        {walletConnectPreSelectDlg}\r\n      </Box>\r\n      );\r\n    \r\n  }\r\n}\r\n\r\nexport default ConnectButton;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport { styled } from '@mui/material/styles';\r\nimport { Button, CircularProgress, Grid, LinearProgress, Typography } from '@mui/material';\r\nimport { StandardTextFieldProps, TextField } from '@mui/material';\r\n\r\n\r\nimport Modal from '@mui/material/Modal';\r\nimport Box from '@mui/material/Box';\r\nimport Paper from '@mui/material/Paper';\r\n\r\nimport { AbiItem, TransactionReceipt } from 'ethereum-abi-types-generator';\r\n\r\nimport {ContractContext} from './assets/abi/voting-contract';\r\nimport Web3 from \"web3\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport copy from 'clipboard-copy';\r\nimport { formatEthFromWei, formatNumber } from './Formatters';\r\n\r\n//  Global setup Web3 Contract-Interaction\r\n//\r\nimport abi from \"./assets/abi/voting-contract.json\";\r\nimport TopAppBar from './components/AppBar';\r\nimport ConnectButton from './components/ConnectButton';\r\n\r\nimport taxMeterImg from './assets/img/tax-meter.png'\r\nimport {ReactComponent as TelegramIcon} from './assets/img/Telegram_logo.svg';\r\nimport SendIcon from '@mui/icons-material/Send';\r\n\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\n\r\n\r\n\r\n//const contractAddress: string = '0x6B4E65FB66F49655cBe8B4228319bB2c9E26aad8'; // release on mainnet\r\n//const contractAddress: string = '0x5372579dc14033a8B6Ed8aB4120781B33bBB711b'; // release on mainnet 2022\r\nconst contractAddress: string = '0x33298545303FC64379c555032589e8fA5F90ac29'; // release on mainnet 2023\r\n\r\n//window.chainIdExpected = 97;\r\nwindow.chainIdExpected = 56;\r\n\r\n\r\ndeclare global {\r\n  interface Window {\r\n    dataRefreshInterval: number,\r\n    farm_contract: ContractContext;\r\n    web3: Web3;\r\n    walletConnectProvider: WalletConnectProvider,\r\n    ethereum: any;\r\n    contractAddress: string;\r\n    contract_abi: AbiItem[];\r\n    walletAddress: string;\r\n    connected: boolean;\r\n    refferalAddress: string; // the ref address that invited me\r\n    chainId: number;\r\n    chainIdExpected: number;\r\n    bnbPrice: number;\r\n  }\r\n}\r\n\r\ninterface AppProps {\r\n  style?: React.CSSProperties;\r\n}\r\n\r\n\r\nconst Item = styled(Paper)(({ theme }) => ({\r\n  ...theme.typography.h3,\r\n  padding: theme.spacing(1),\r\n  textAlign: 'center',\r\n  color: theme.palette.text.secondary,\r\n}));\r\n\r\nwindow.dataRefreshInterval = 3000;\r\n\r\nclass App extends React.Component<AppProps> {\r\n  \r\n  state = {\r\n    radioValue: \"\",\r\n    progress: false,\r\n    walletAccepted: false,\r\n    alreadyVoted: false,\r\n    totalYES: 0,\r\n    totalNO: 0,\r\n    totalVotes: 0,\r\n    votingEnded: false\r\n  }\r\n\r\n  baseState: any;\r\n  _stateInterval: any;\r\n\r\n  constructor(props: AppProps) {\r\n    super(props);\r\n\r\n    this.baseState = this.state;\r\n    // properties\r\n\r\n\r\n  }\r\n\r\n\r\n  componentDidMount = () => { \r\n    window.contractAddress = contractAddress;\r\n    window.contract_abi = abi as AbiItem[];\r\n\r\n\r\n    this.checkState();\r\n\r\n    if(this._stateInterval){\r\n      clearInterval(this._stateInterval);\r\n    }\r\n    this._stateInterval = setInterval(this.checkState, window.dataRefreshInterval);\r\n\r\n    //this.setModalOpen();\r\n  }\r\n\r\n\r\n  componentWillUnmount = () => { \r\n    \r\n  }\r\n\r\n  \r\n  checkState = () => {  \r\n\r\n    if(window.connected !== true){\r\n      this.setState(this.baseState);\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      yourAddress: window.walletAddress,\r\n    });\r\n\r\n    window.farm_contract.methods.getWalletStatus(window.walletAddress).call().then((result: boolean) => {\r\n      //console.log(result);\r\n      this.setState({\r\n        walletAccepted: result\r\n      });\r\n    });\r\n\r\n\r\n    window.farm_contract.methods.getUserAnswer(window.walletAddress).call().then((result: string) => {\r\n      //console.log(result);\r\n      this.setState({\r\n        alreadyVoted: result != \"0\"\r\n      });\r\n    });\r\n\r\n    window.farm_contract.methods.getTotalAnswers(\"1\").call().then((resultYes: string) => {\r\n      //console.log(result);\r\n      let totalYES = parseInt(resultYes);\r\n\r\n\r\n      window.farm_contract.methods.getTotalAnswers(\"2\").call().then((resultNO: string) => {\r\n        //console.log(result);\r\n        let totalNO = parseInt(resultNO);\r\n\r\n        this.setState({\r\n          totalYES: (100 / (totalYES + totalNO) * totalYES),\r\n          totalNO: (100 / (totalYES + totalNO) * totalNO),\r\n          totalVotes: totalYES + totalNO\r\n        });\r\n\r\n        window.farm_contract.methods.started().call().then((started: boolean) => {\r\n          //console.log(result);\r\n\r\n          if(started == false && (totalYES + totalNO) > 0){\r\n            this.setState({\r\n              votingEnded: true\r\n            });\r\n          }\r\n\r\n\r\n        });\r\n        \r\n      });\r\n    });\r\n\r\n\r\n  }\r\n\r\n  onClick_Submit = () => {\r\n    //alert(this.state.radioValue)\r\n    let openValue = \"\";\r\n    if(this.state.radioValue.toLowerCase() == \"op1\"){\r\n      openValue = \"1\";\r\n    }else if(this.state.radioValue.toLowerCase() == \"op2\"){\r\n      openValue = \"2\";\r\n    }\r\n\r\n    this.setState({\r\n      progress: true\r\n    });\r\n\r\n    window.farm_contract.methods.vote(openValue).send({from: window.walletAddress}).then((response) => {\r\n      this.setState({\r\n        progress: false\r\n      });\r\n    }).catch((err:any) => {\r\n      alert(\"transaction failed\");\r\n      this.setState({\r\n        progress: false\r\n      });\r\n    });\r\n  }\r\n\r\n  handleRadioChange = (event: any, _value: string) => {\r\n    this.setState({\r\n      radioValue: _value\r\n    })\r\n  }\r\n\r\n  //  Main Layout\r\n  //\r\n  render = () => {\r\n    return (\r\n      <div>\r\n      <div className={\"wrapper\"}>\r\n     <img className={\"logo\"} src={\"https://piston-token.com/images/logo.svg\"}/>\r\n    <h2>PISTON RACE</h2>\r\n    <h3>VOTING</h3>\r\n\r\n    <div style={{display:(window.connected == true && this.state.walletAccepted == true)?\"\":\"none\"}}>\r\n\r\n        \r\n        <div>\r\n          <p className=\"question\">Choose your Option</p>\r\n          <p>Please see the details <a href=\"#details\">here</a></p>\r\n\r\n          \r\n        </div>\r\n        <div className=\"poll-area\" style={{display: this.state.alreadyVoted || this.state.votingEnded?\"none\":\"\"}}>\r\n\r\n          <FormControl variant=\"standard\" fullWidth={true} disabled={this.state.progress}>\r\n              <RadioGroup\r\n                name=\"poll\"\r\n                /*value={value}*/\r\n                onChange={this.handleRadioChange}\r\n              >\r\n                <FormControlLabel value=\"op1\" control={<Radio />} label=\"Option 1\" style={{marginLeft: \"0\", marginRight: \"0\"}} />\r\n                <FormControlLabel value=\"op2\" control={<Radio />} label=\"Option 2\" style={{marginLeft: \"0\", marginRight: \"0\"}}/>\r\n              </RadioGroup>\r\n            </FormControl>\r\n\r\n          <Button disabled={this.state.progress || this.state.radioValue == \"\"} fullWidth={true} variant={\"contained\"} color={\"primary\"} sx={{my: 0, marginTop: \"32px\" }} size=\"large\" onClick={this.onClick_Submit}><SendIcon style={{height: \"20px\", marginRight: \"8px\"}}></SendIcon>submit vote</Button>\r\n        </div>\r\n\r\n        <div style={{textAlign:\"center\", paddingTop: \"16px\", paddingBottom: \"16px\", display: this.state.alreadyVoted || this.state.votingEnded?\"\":\"none\"}}>\r\n\r\n          <div className={\"errormsgMain\"} style={{display: this.state.votingEnded?\"\":\"none\"}}>\r\n            The Voting has ended.\r\n          </div>\r\n\r\n          <div style={{border: \"1px solid white\", borderRadius: \"10px\"}}>\r\n            <div className='voteResult'>Option 1</div>\r\n            <div className='voteResult' style={{fontSize: \"20pt\"}}>{this.state.totalYES.toFixed(1)}%</div>\r\n          </div>\r\n          <br/>\r\n          <div style={{border: \"1px solid white\", borderRadius: \"10px\"}}>\r\n            <div className='voteResult'>Option 2</div>\r\n            <div className='voteResult' style={{fontSize: \"20pt\"}}>{this.state.totalNO.toFixed(1)}%</div>\r\n          </div>\r\n\r\n          <br/>\r\n          <div>Total Votes: {this.state.totalVotes}</div>\r\n        </div>\r\n    </div>\r\n\r\n    <div style={{display:(window.connected == true && this.state.walletAccepted != true)?\"\":\"none\", border: \"1px solid white\", borderRadius: \"10px\"}}>\r\n      <div className={\"errormsgMain\"}>your wallet is not invested in the piston race</div>\r\n    </div>\r\n\r\n    <Box sx={{ display: this.state.progress && !this.state.alreadyVoted?'flex':'none' }}>\r\n      <CircularProgress />\r\n    </Box>\r\n\r\n    <div style={{marginTop: \"24px\"}}>\r\n      <ConnectButton />\r\n    </div>\r\n  </div>\r\n  <a id=\"details\"></a>\r\n      <div className={\"wrapper left\"} style={{marginTop: \"16px\"}}>\r\n        <h3>Trading is on pause. Please read the news and use the voting</h3>\r\n        We are currently sitting on roughly $45k liquidity in our contract. After much thought and research we've come up with a plan. As always, any changes that happen in PSTN are VOTED by the community so we'd like to place this vote with you once more. We have two options:\r\n<br/><br/>\r\n<h4>OPTION 1.</h4>Keep things as they are, when the funds are finished the project and site will be closed. Everyone continues to carry on as they're currently doing. Estimated end is roughly 2 months from today.\r\n<br/><br/>\r\n<h4>OPTION 2.</h4>We pull the liquidity and place it with 2 trading bots.<br/> With this choice, all trading will be stopped and due to the process of pulling out the liquidity we will have to bring the chart to 0.<br/>The website will be modified giving only one button. <b>CLAIM</b>.\r\n<br/> While we grow the liquidity we will periodically withdraw from the bot and place the funds into a pool.<br/>ALL members who did not gain their original investment will be able to withdraw $X per day (to be defined).<br/>This will continue until all members have received their original investment back.<br/>We are able to see who has/has not gotten back their initial based on blackchain interaction showing amounts withdrawn and swapped.<br/>Keep in mind this is not a short process and it will of course take some time to build the funds.<br/>The bot performance will be made public so everyone is able to see the current status at any time, continuing to be fully transparent as we always have been. \r\n<br/>\r\nPlease note, option 2 and the access to future funds made from the bot will be available ONLY for members that did not gain back their original investment AND ACTUALLY VOTE. All other members will not have access to this pool.\r\n<br/><br/>\r\nThe choice is yours!<br/><br/><br/>\r\n<b>Only votes from existing holders at the timestamp of this post will be counted.</b>\r\n<br/>\r\n\r\n\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport amber from '@mui/material/colors/amber'\r\n\r\nimport { ThemeProvider, useTheme, createTheme } from '@mui/material/styles';\r\n\r\nconst darkTheme = createTheme({\r\n  palette: {\r\n    mode: 'light',\r\n    primary: {\r\n      main: '#FFFFFF',\r\n    },\r\n    secondary: {\r\n      main: '#193d7d',\r\n    },\r\n    background: {\r\n      default: \"#FFFFFF\"\r\n    }\r\n  },\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <ThemeProvider theme={darkTheme}>\r\n        <App />\r\n      </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}